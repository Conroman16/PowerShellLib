#### EXAMPLE ARGS FOR THIS SCRIPT
#### powershell "C:/Scripts/FilebotRunner.ps1 \"%L\" \"%S\" \"%N\" \"%K\" \"%F\" \"%D"\"

#### FILEBOT ARG STRING GENERATED BY THIS PROGRAM
#### '%' variables are replaced by uTorrent
<# filebot 
    -script fn:amc 
        --output "Y:/FBOutput" 
        --log-file amc.log 
        --action copy 
        --conflict auto 
        -non-strict 
        --def 
            music=y 
            subtitles=en 
            extras=y 
            plex=plex 
            artwork=y 
            clean=y 
            "ut_label=%L" 
            "ut_state=%S" 
            "ut_title=%N" 
            "ut_kind=%K" 
            "ut_file=%F" 
            "ut_dir=%D" 
            "seriesFormat=Y:/TV Shows/{n}/Season {s}/{n} - {s00e00} - {t} - {vf} {ac}-{af}" 
            "movieFormat=Y:/Movies/{n} ({y}) {vf}/{n} ({y}) {vf} {ac}-{af}" 
            "musicFormat=Z:/DownloadedMusic/{artist}/{album}/{pi.pad(2)} - {artist} - {t} - [{audio.BitDepthString} - {audio.BitRateString}]" 
#>

param([string]$ut_label, [string]$ut_state, [string]$ut_title, [string]$ut_kind, [string]$ut_file, [string]$ut_dir)

# Make sure the important args aren't empty
if (![string]::IsNullOrWhiteSpace($ut_title) -and ![string]::IsNullOrWhiteSpace($ut_kind) -and (![string]::IsNullOrWhiteSpace($ut_file) -or ![string]::IsNullOrWhiteSpace($ut_dir)))
{
    ""
    "ARGUMENTS"
    "ut_label = $ut_label"
    "ut_state = $ut_state"
    "ut_title = $ut_title"
    "ut_kind = $ut_kind"
    "ut_file = $ut_file"
    "ut_dir = $ut_dir"
    ""
}
else{
    Write-Host -Verbose "INVALID ARGUMENTS!  Exiting..."
    exit
}

# Output paths
$outputRoot = "Y:"
$output = "$outputRoot/FBOutput"
$tvRootPath = "$outputRoot/TV Shows"
$movieRootPath = "$outputRoot/Movies"
$musicRootPath = "Z:/DownloadedMusic"

# Naming formats
$seriesFormat = "$tvRootPath/{n}/Season {s}/{n} - {s00e00} - {t} - {vf} {ac}-{af}"
$movieFormat = "$movieRootPath/{n} ({y}) {vf}/{n} ({y}) {vf} {ac}-{af}"
$musicFormat = "$musicRootPath/{artist}/{album}/{pi.pad(2)} - {artist} - {t} - [{audio.BitDepthString} - {audio.BitRateString}]"

# Settings
$logFile = "amc.log"
$action = "copy"
$conflict = "auto"

# 'Def' stuff
$music = "n"
$subtitles = "en"
$extras = "y"
$plexServer = "plex.cjtkennedy.com"
$clean = "y"

## Ensure network drive containing output directory is actively connected
"Ensuring output drive is mounted..."
try {
    $noop = [System.IO.Directory]::EnumerateFileSystemEntries("$outputRoot")
}
catch{[System.Exception]
    Write-Host -Verbose "Unable to access output drive!"
    throw
    exit
}
"Success!  Drive is mounted."
""

## Filebot execution
# Argument string builder
$argString = New-Object System.Text.StringBuilder

# Load up general stuff
$argString.Append("-script fn:amc --output `"$output`" --log-file $logFile --action $action --conflict $conflict -non-strict ")

# Set general 'Def' stuff
$argString.Append("--def music=$music subtitles=$subtitles extras=$extras plex=$plexServer clean=$clean ")

# Set uT stuff
$argString.Append("`"ut_label=$ut_label`" `"ut_state=$ut_state`" `"ut_title=$ut_title`" `"ut_kind=$ut_kind`" `"ut_file=$ut_file`" `"ut_dir=$ut_dir`" ")

# Set naming formats
$argString.Append("`"seriesFormat=$seriesFormat`" ")
$argString.Append("`"movieFormat=$movieFormat`" ")
$argString.Append("`"musicFormat=$musicFormat`" ")

# Build filebot argument string
$args = $argString.ToString()

# Initialize filebot process
$startInfo = New-Object System.Diagnostics.ProcessStartInfo
$startInfo.FileName = "filebot"
$startInfo.Arguments = " $args"
$startInfo.Verb = "runas"

# Execute filebot process
"Starting FileBot..."
$filebotStartRes = [System.Diagnostics.Process]::Start($startInfo)

# If filebot started correctly, print out arguments
# If filebot did NOT start correctly, print error message and exit with exception
if ($filebotStartRes -eq $true){
    "FILEBOT STARTED"
    "ARGUMENTS: $args"
    ""
}
else{
    $errMsg = "Error starting FileBot!  Exiting..."
    Write-Host -Verbose $errMsg
    throw New-Object System.Exception $errMsg
    exit
}

# Exit from powershell process after spawning filebot process
"Done.  Exiting..."
exit